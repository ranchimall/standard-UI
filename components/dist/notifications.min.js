const smNotifications=document.createElement("template");smNotifications.innerHTML="\n        <style>\n            *{\n                padding: 0;\n                margin: 0;\n                -webkit-box-sizing: border-box;\n                        box-sizing: border-box;\n            } \n            :host{\n                display: flex;\n                --icon-height: 1.5rem;\n                --icon-width: 1.5rem;\n            }\n            .hide{\n                opacity: 0 !important;\n                pointer-events: none !important;\n            }\n            .notification-panel{\n                display: grid;\n                width: min(26rem, 100%);\n                gap: 0.5rem;\n                position: fixed;\n                left: 0;\n                top: 0;\n                z-index: 100;\n                max-height: 100%;\n                padding: 1rem;\n                overflow: hidden auto;\n                overscroll-behavior: contain;\n                touch-action: none;\n            }\n            .notification-panel:empty{\n                display:none;\n            }\n            .notification{\n                display: flex;\n                position: relative;\n                border-radius: 0.5rem;\n                background: rgba(var(--foreground-color, (255,255,255)), 1);\n                overflow: hidden;\n                overflow-wrap: break-word;\n                word-wrap: break-word;\n                word-break: break-all;\n                word-break: break-word;\n                hyphens: auto;\n                padding: max(1rem,1.5vw);\n                align-items: center;\n                box-shadow: 0 0.5rem 1rem 0 rgba(0,0,0,0.14);\n                touch-action: none;\n            }\n            .notification:not(.pinned)::before{\n                content: '';\n                position: absolute;\n                bottom: 0;\n                left: 0;\n                height: 0.2rem;\n                width: 100%;\n                background-color: var(--accent-color, teal);\n                transform: scaleX(0);\n                animation: loading var(--timeout, 5000ms) linear forwards;\n                transform-origin: left;\n            }\n            @keyframes loading{\n                0%{\n                    transform: scaleX(0);\n                }\n                100%{\n                    transform: scaleX(1);\n                }\n            }\n            .icon-container:not(:empty){\n                margin-right: 0.5rem;\n                height: var(--icon-height);\n                width: var(--icon-width);\n                flex-shrink: 0;\n            }\n            .notification:last-of-type{\n                margin-bottom: 0;\n            }\n            .icon {\n                height: 100%;\n                width: 100%;\n                fill: rgba(var(--text-color, (17,17,17)), 0.7);\n            }\n            .icon--success {\n                fill: var(--green);\n            }\n            .icon--failure,\n            .icon--error {\n            fill: var(--danger-color);\n            }\n            output{\n                width: 100%;\n            }\n            .close{\n                height: 2rem;\n                width: 2rem;\n                border: none;\n                cursor: pointer;\n                margin-left: 1rem;\n                border-radius: 50%;\n                padding: 0.3rem;\n                transition: background-color 0.3s, transform 0.3s;\n                background-color: transparent;\n                flex-shrink: 0;\n            }\n            .close:active{\n                transform: scale(0.9);\n            }\n            .action{\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                padding: 0.5rem 0.8rem;\n                border-radius: 0.2rem;\n                border: none;\n                background-color: rgba(var(--text-color, (17,17,17)), 0.03);\n                font-family: inherit;\n                font-size: inherit;\n                color: var(--accent-color, teal);\n                font-weight: 500;\n                cursor: pointer;\n            }\n            @media screen and (max-width: 640px){\n                .close{\n                    display: none;\n                }\n                .notification-panel:not(:empty){\n                    padding-bottom: 3rem;\n                }\n            }\n            @media screen and (min-width: 640px){\n                .notification-panel{\n                    top: auto;\n                    bottom: 0;\n                    max-width: max-content;\n                }\n                .notification{\n                    width: auto;\n                    max-width: max-content; \n                    border: solid 1px rgba(var(--text-color, (17,17,17)), 0.2);\n                }\n            }\n            @media (any-hover: hover){\n                ::-webkit-scrollbar{\n                    width: 0.5rem;\n                }\n                \n                ::-webkit-scrollbar-thumb{\n                    background: rgba(var(--text-color, (17,17,17)), 0.3);\n                    border-radius: 1rem;\n                    &:hover{\n                        background: rgba(var(--text-color, (17,17,17)), 0.5);\n                    }\n                }\n                .close:hover{\n                    background-color: rgba(var(--text-color, (17,17,17)), 0.1);\n                }\n            }\n        </style>\n        <div class=\"notification-panel\"></div>\n        ",customElements.define("sm-notifications",class extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}).append(smNotifications.content.cloneNode(!0)),this.notificationPanel=this.shadowRoot.querySelector(".notification-panel"),this.animationOptions={duration:300,fill:"forwards",easing:"cubic-bezier(0.175, 0.885, 0.32, 1.275)"},this.push=this.push.bind(this),this.createNotification=this.createNotification.bind(this),this.removeNotification=this.removeNotification.bind(this),this.clearAll=this.clearAll.bind(this),this.remove=this.remove.bind(this),this.handleTouchMove=this.handleTouchMove.bind(this),this.startX=0,this.currentX=0,this.endX=0,this.swipeDistance=0,this.swipeDirection="",this.swipeThreshold=0,this.startTime=0,this.swipeTime=0,this.swipeTimeThreshold=200,this.currentTarget=null,this.notificationTimeout=5e3,this.mediaQuery=window.matchMedia("(min-width: 640px)"),this.handleOrientationChange=this.handleOrientationChange.bind(this),this.isBigViewport=!1}set timeout(t){isNaN(t)||(this.notificationTimeout=t)}randString(t){let n="";const i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";for(let e=0;e<t;e++)n+=i.charAt(Math.floor(Math.random()*i.length));return n}createNotification(t,n={}){const{pinned:i=!1,icon:e,action:o,timeout:a=this.notificationTimeout}=n,r=document.createElement("div");return r.id=this.randString(8),r.className=`notification ${i?"pinned":""}`,r.style.setProperty("--timeout",`${a}ms`),r.innerHTML=`\n            ${e?`<div class="icon-container">${e}</div>`:""}\n            <output>${t}</output>\n            ${o?`<button class="action">${o.label}</button>`:""}\n            <button class="close">\n                <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill="none" d="M0 0h24v24H0z"/><path d="M12 10.586l4.95-4.95 1.414 1.414-4.95 4.95 4.95 4.95-1.414 1.414-4.95-4.95-4.95 4.95-1.414-1.414 4.95-4.95-4.95-4.95L7.05 5.636z"/></svg>\n            </button>\n        `,o&&r.querySelector(".action").addEventListener("click",o.callback),r.querySelector(".close").addEventListener("click",()=>{this.removeNotification(r)}),i||setTimeout(()=>{this.removeNotification(r,this.isBigViewport?"left":"top")},a),r}push(t,n={}){const i=this.createNotification(t,n);return this.isBigViewport?this.notificationPanel.append(i):this.notificationPanel.prepend(i),i.scrollIntoView({behavior:"smooth"}),this.notificationPanel.animate([{transform:`translateY(${this.isBigViewport?"":"-"}${i.clientHeight}px)`},{transform:"none"}],this.animationOptions),i.animate([{transform:"translateY(-1rem)",opacity:"0"},{transform:"none",opacity:"1"}],this.animationOptions).onfinish=(t=>{t.target.commitStyles(),t.target.cancel()}),i.id}removeNotification(t,n="left"){if(!t)return;const i="left"===n||"top"===n?"-":"+";this.isBigViewport||"top"!==n?t.animate([{transform:this.currentX?`translateX(${this.currentX}px)`:"none",opacity:"1"},{transform:`translateX(calc(${i}${Math.abs(this.currentX)}px ${i} 1rem))`,opacity:"0"}],this.animationOptions).onfinish=(()=>{t.remove()}):t.animate([{transform:this.currentX?`translateY(${this.currentX}px)`:"none",opacity:"1"},{transform:`translateY(calc(${i}${Math.abs(this.currentX)}px ${i} 1rem))`,opacity:"0"}],this.animationOptions).onfinish=(()=>{t.remove()})}remove(t){const n=this.notificationPanel.querySelector(`#${t}`);n&&this.removeNotification(n)}clearAll(){Array.from(this.notificationPanel.children).forEach(t=>{this.removeNotification(t)})}handleTouchMove(t){this.currentX=t.touches[0].clientX-this.startX,this.currentTarget.style.transform=`translateX(${this.currentX}px)`}handleOrientationChange(t){this.isBigViewport=t.matches,t.matches}connectedCallback(){this.handleOrientationChange(this.mediaQuery),this.mediaQuery.addEventListener("change",this.handleOrientationChange),this.notificationPanel.addEventListener("touchstart",t=>{t.target.closest(".close")?this.removeNotification(t.target.closest(".notification")):t.target.closest(".notification")&&(this.swipeThreshold=t.target.closest(".notification").getBoundingClientRect().width/2,this.currentTarget=t.target.closest(".notification"),this.startTime=Date.now(),this.startX=t.touches[0].clientX,this.startY=t.touches[0].clientY,this.notificationPanel.addEventListener("touchmove",this.handleTouchMove,{passive:!0}))},{passive:!0}),this.notificationPanel.addEventListener("touchend",t=>{this.endX=t.changedTouches[0].clientX,this.endY=t.changedTouches[0].clientY,this.swipeDistance=Math.abs(this.endX-this.startX),this.swipeTime=Date.now()-this.startTime,this.endX>this.startX?this.swipeDirection="right":this.swipeDirection="left",this.swipeTime<this.swipeTimeThreshold?this.swipeDistance>50&&this.removeNotification(this.currentTarget,this.swipeDirection):this.swipeDistance>this.swipeThreshold?this.removeNotification(this.currentTarget,this.swipeDirection):this.currentTarget.animate([{transform:`translateX(${this.currentX}px)`},{transform:"none"}],this.animationOptions).onfinish=(t=>{t.target.commitStyles(),t.target.cancel()}),this.notificationPanel.removeEventListener("touchmove",this.handleTouchMove),this.currentX=0})}disconnectedCallback(){mediaQueryList.removeEventListener("change",handleOrientationChange)}});